// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, DatabaseTable, AlgebraicValue, ReducerEvent, Identity, Address, ClientDB, SpacetimeDBClient } from "@clockworklabs/spacetimedb-sdk";
// @ts-ignore
import { ElementStruct } from "./element_struct";

export class Elements extends DatabaseTable
{
	public static db: ClientDB = __SPACETIMEDB__.clientDB;
	public static tableName = "Elements";
	public id: number;
	public element: ElementStruct;
	public transparency: number;
	public transform: string;
	public clip: string;
	public locked: boolean;
	public folderId: number | null;
	public layoutId: number;
	public placedBy: string;
	public lastEditedBy: string;
	public zIndex: number;

	public static primaryKey: string | undefined = "id";

	constructor(id: number, element: ElementStruct, transparency: number, transform: string, clip: string, locked: boolean, folderId: number | null, layoutId: number, placedBy: string, lastEditedBy: string, zIndex: number) {
	super();
		this.id = id;
		this.element = element;
		this.transparency = transparency;
		this.transform = transform;
		this.clip = clip;
		this.locked = locked;
		this.folderId = folderId;
		this.layoutId = layoutId;
		this.placedBy = placedBy;
		this.lastEditedBy = lastEditedBy;
		this.zIndex = zIndex;
	}

	public static serialize(value: Elements): object {
		return [
		value.id, ElementStruct.serialize(value.element), value.transparency, value.transform, value.clip, value.locked, value.folderId ? { "some": value.folderId } : { "none": [] }, value.layoutId, value.placedBy, value.lastEditedBy, value.zIndex
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("id", AlgebraicType.createPrimitiveType(BuiltinType.Type.U32)),
			new ProductTypeElement("element", ElementStruct.getAlgebraicType()),
			new ProductTypeElement("transparency", AlgebraicType.createPrimitiveType(BuiltinType.Type.I32)),
			new ProductTypeElement("transform", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
			new ProductTypeElement("clip", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
			new ProductTypeElement("locked", AlgebraicType.createPrimitiveType(BuiltinType.Type.Bool)),
			new ProductTypeElement("folderId", AlgebraicType.createSumType([
			new SumTypeVariant("some", AlgebraicType.createPrimitiveType(BuiltinType.Type.U32)),
			new SumTypeVariant("none", AlgebraicType.createProductType([
		])),
		])),
			new ProductTypeElement("layoutId", AlgebraicType.createPrimitiveType(BuiltinType.Type.U32)),
			new ProductTypeElement("placedBy", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
			new ProductTypeElement("lastEditedBy", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
			new ProductTypeElement("zIndex", AlgebraicType.createPrimitiveType(BuiltinType.Type.I32)),
		]);
	}

	public static fromValue(value: AlgebraicValue): Elements
	{
		let productValue = value.asProductValue();
		let __Id = productValue.elements[0].asNumber();
		let __Element = ElementStruct.fromValue(productValue.elements[1]);
		let __Transparency = productValue.elements[2].asNumber();
		let __Transform = productValue.elements[3].asString();
		let __Clip = productValue.elements[4].asString();
		let __Locked = productValue.elements[5].asBoolean();
		let __FolderId = productValue.elements[6].asSumValue().tag == 1 ? null : productValue.elements[6].asSumValue().value.asNumber();
		let __LayoutId = productValue.elements[7].asNumber();
		let __PlacedBy = productValue.elements[8].asString();
		let __LastEditedBy = productValue.elements[9].asString();
		let __ZIndex = productValue.elements[10].asNumber();
		return new this(__Id, __Element, __Transparency, __Transform, __Clip, __Locked, __FolderId, __LayoutId, __PlacedBy, __LastEditedBy, __ZIndex);
	}

	public static *filterById(value: number): IterableIterator<Elements>
	{
		for (let instance of this.db.getTable("Elements").getInstances())
		{
			if (instance.id === value) {
				yield instance;
			}
		}
	}

	public static findById(value: number): Elements | undefined
	{
		return this.filterById(value).next().value;
	}

	public static *filterByTransparency(value: number): IterableIterator<Elements>
	{
		for (let instance of this.db.getTable("Elements").getInstances())
		{
			if (instance.transparency === value) {
				yield instance;
			}
		}
	}

	public static *filterByTransform(value: string): IterableIterator<Elements>
	{
		for (let instance of this.db.getTable("Elements").getInstances())
		{
			if (instance.transform === value) {
				yield instance;
			}
		}
	}

	public static *filterByClip(value: string): IterableIterator<Elements>
	{
		for (let instance of this.db.getTable("Elements").getInstances())
		{
			if (instance.clip === value) {
				yield instance;
			}
		}
	}

	public static *filterByLocked(value: boolean): IterableIterator<Elements>
	{
		for (let instance of this.db.getTable("Elements").getInstances())
		{
			if (instance.locked === value) {
				yield instance;
			}
		}
	}

	public static *filterByLayoutId(value: number): IterableIterator<Elements>
	{
		for (let instance of this.db.getTable("Elements").getInstances())
		{
			if (instance.layoutId === value) {
				yield instance;
			}
		}
	}

	public static *filterByPlacedBy(value: string): IterableIterator<Elements>
	{
		for (let instance of this.db.getTable("Elements").getInstances())
		{
			if (instance.placedBy === value) {
				yield instance;
			}
		}
	}

	public static *filterByLastEditedBy(value: string): IterableIterator<Elements>
	{
		for (let instance of this.db.getTable("Elements").getInstances())
		{
			if (instance.lastEditedBy === value) {
				yield instance;
			}
		}
	}

	public static *filterByZIndex(value: number): IterableIterator<Elements>
	{
		for (let instance of this.db.getTable("Elements").getInstances())
		{
			if (instance.zIndex === value) {
				yield instance;
			}
		}
	}


}

export default Elements;
