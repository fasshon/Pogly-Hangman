// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, DatabaseTable, AlgebraicValue, ReducerEvent, Identity, Address, ClientDB, SpacetimeDBClient } from "@clockworklabs/spacetimedb-sdk";

export class Heartbeat extends DatabaseTable
{
	public static db: ClientDB = __SPACETIMEDB__.clientDB;
	public static tableName = "Heartbeat";
	public id: number;
	public serverIdentity: Identity;
	public tick: number;

	public static primaryKey: string | undefined = "id";

	constructor(id: number, serverIdentity: Identity, tick: number) {
	super();
		this.id = id;
		this.serverIdentity = serverIdentity;
		this.tick = tick;
	}

	public static serialize(value: Heartbeat): object {
		return [
		value.id, Array.from(value.serverIdentity.toUint8Array()), value.tick
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("id", AlgebraicType.createPrimitiveType(BuiltinType.Type.U32)),
			new ProductTypeElement("serverIdentity", AlgebraicType.createProductType([
			new ProductTypeElement("__identity_bytes", AlgebraicType.createArrayType(AlgebraicType.createPrimitiveType(BuiltinType.Type.U8))),
		])),
			new ProductTypeElement("tick", AlgebraicType.createPrimitiveType(BuiltinType.Type.I32)),
		]);
	}

	public static fromValue(value: AlgebraicValue): Heartbeat
	{
		let productValue = value.asProductValue();
		let __Id = productValue.elements[0].asNumber();
		let __ServerIdentity = new Identity(productValue.elements[1].asProductValue().elements[0].asBytes());
		let __Tick = productValue.elements[2].asNumber();
		return new this(__Id, __ServerIdentity, __Tick);
	}

	public static *filterById(value: number): IterableIterator<Heartbeat>
	{
		for (let instance of this.db.getTable("Heartbeat").getInstances())
		{
			if (instance.id === value) {
				yield instance;
			}
		}
	}

	public static findById(value: number): Heartbeat | undefined
	{
		return this.filterById(value).next().value;
	}

	public static *filterByServerIdentity(value: Identity): IterableIterator<Heartbeat>
	{
		for (let instance of this.db.getTable("Heartbeat").getInstances())
		{
			if (instance.serverIdentity.isEqual(value)) {
				yield instance;
			}
		}
	}

	public static *filterByTick(value: number): IterableIterator<Heartbeat>
	{
		for (let instance of this.db.getTable("Heartbeat").getInstances())
		{
			if (instance.tick === value) {
				yield instance;
			}
		}
	}


}

export default Heartbeat;
